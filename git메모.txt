git add (스테이징 할 파일): 기록을 남기고 싶은 파일 고르기, staging area, 스테이징한다
git commit -m (메세지): 기록 저장소로 옮김, repository(저장소)
git suatus: 어떤 파일들을 스테이징 해놨는지, 또는 어떤 파일들이 수정됐는지 확인
git log --all --oneline: 커밋한 내역 조회
git branch (브랜치명): 브랜치 생성
git switch (브랜치명): 브랜치 이동
git merge (브랜치명): 기준 브랜치로 직접 이동후 브랜치 합치기
충돌 해결은 코드고치고 애드+커밋
git branch -d (브랜치명): merge 완료된 브랜치 삭제
git branch -D (브랜치명): merge 안한 브랜치 삭제
rebase 쓰는 이유: 간단하고 짧은 브랜치들은 이거 쓰면 깔끔해보임 -> 단점: conflict 많이 남
rebase and merge
    1. 새로운 브랜치로 먼저 이동해서
    2. git rebase main 입력 
    3. 그럼 브랜치가 main 브랜치 끝으로 이동하는데 그걸 fast-forward merge 하면 됨
squash and merge 쓰는 이유  
    (1) 3-way merge 된 것들은 매우 복잡해보임 
    (2) main 브랜치 git log 출력해보면 3-way merge된 브랜치들의 commit 내역도 다 같이 출력되어서 더러워짐 
    -> 3-way merge처럼 선으로 이어주지 않고 새 브랜치에 있던 코드변경사항들이 main 브랜치로 이동함
git merge --squash (브랜치명) -> git commit -m (메세지): 브랜치에서 만들어놨던 많은 commit 을 다 합쳐서 하나의 commit으로 main 브랜치에 생성
git restore (파일명): 파일 복구
git restore --source (커밋아이디) (파일명): 특정 커밋 시점으로 파일 복구
git revert (커밋 아이디): 커밋 취소 (선택한 커밋을 제외한 커밋들을 생성), 여러개 입력 가능
git reset --hard (커밋 아이디): 과거로 되돌리기 (*주의: 협업시엔 사용금지*)
git reset --soft (커밋 아이디): 리셋인데 변동사항 안지우고 스테이징해놓음
git reset --mixed (커밋 아이디): 리셋인데 변동사항 안지우고 unstage해놓음
git branch -M (브랜치명): 메인 브랜치이름 변경
git push -u (원격저장소주소:깃허브 주소) (올리고싶은 로컬브랜치명): 로컬 -> 원격저장소 업로드
git stash (save: 원하는 경우 집어넣으면 메모가능): 코드를 임시공간으로 보냄 -> 코드목록 조회는 git stash list
    - 최근 커밋과의 차이점을 전부 보관
    - 스테이징 안해놓은 새로운 파일은 stash 안될 수도 있음 -> 강제로 하는 방법도 존재
    - 불러올땐 git stash pop(가장 최근에 보관했던 코드부터 불러옴)
    - git stash drop (번호): 1개 삭제
    - git stash clear: 전부삭제
    - git stash -p: 일부 코드만 보관